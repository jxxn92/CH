/******************************************************************/
// 아래 코드([문제 0] 앞까지)를 마킹하여 복사한 후 소스 파일에 삽입하라.
// #include <   > 사이의 공백은 컴파일 에러가 발생하니 제거해 주세요.
/******************************************************************/

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
    
/******************************************************************************
 * Class Rand
 ******************************************************************************/
// 난수를 발생시키는 클래스: 이 클래스는 무시하고 넘어 가세요.
#include <random>

const int RAND_COUNT = 10;
int seed = 0;

class Rand {
    default_random_engine re;
    uniform_int_distribution< int > dist;
public:
    Rand(int low, int high): dist(low, high) { }
    int getInt() { return dist(re); }
    void setSeed(int s = 0) {
        seed = s;
        if (seed == 0) {
            cout << "seed for random number? ";
            cin >> seed;
        }
        re.seed(seed);
    }
};
Rand rnd(0, RAND_COUNT-1); // [0, RAND_COUNT-1] 범위의 난수 발생기


/******************************************************************************
 * Test
 ******************************************************************************/

void displayVector(vector< int >& v) { // vector의 모든 원소 출력함
    cout << "vector[size=" << v.size() << "]: ";

    // TODO: 벡터 v의 모든 원소를 출력하라.
    for(int i = 0; i < v.size(); i++){
        printf("%d",v.at(i));
    }
    cout << endl;
}

void createVector(vector< int >& v) {  // 벡터에 RAND_COUNT개의 원소를 삽입하고 화면에 보여줌

    // TODO: RAND_COUNT개(10개)의 난수를 발생시켜 벡터 v에 추가하라.
    //       rnd.getInt()의 리턴 값이 난수이다.
    for(int i = 0 ; i < 10; i++){
        v.push_back(rnd.getInt());
    }
    displayVector(v);
}

void createVector() {
    vector< int > v;
    createVector(v);
}

void sortVector() {
    vector< int > v;
    createVector(v);

    // 벡터 v의 앞쪽  5개 원소들을 정렬하라.
    // 벡터 v의 마지막 5개 원소들을 정렬하라.

    displayVector(v);
}

void displayMap(map< int, int >& m) { // map의 모든 원소를 출력함
    cout << "map[size=" << m.size() << "]: ";
    for (auto p : m)
        cout << "(" << p.first << "," << p.second << ") "; // (키,값)
    cout << endl;
}

void createMap(map< int, int >& m) {

    // TODO: RAND_COUNT개(10개)의 (키, 값) 쌍을 맵 m에 추가하라. 
    //       난수 발생 함수 rnd.getInt()를 이용하여 (키, 값) 쌍을 생성하라. 
    //       하나의 (키, 값) 생성 시 '키'를 먼저 생성하고 그 뒤에 '값'을 생성하라.(생성 순서 중요)

    displayMap(m);
}

void createMap() {
    map< int, int > m;
    createMap(m);
}

void findMap() {
    map< int, int > m;
    createMap(m);
    int key = rnd.getInt();
    
    // TODO: 맵 m에서 key를 검색한 후 해당 key를 
    //       찾았으면 아래 문장을 이용하여 상응하는 '값'을 출력하고 (아래 문장에서 '값' 대신 실제 값을 출력하라.)
    //           cout << "found(key,value): (" << key << "," << '값' << ")" << endl;
    //       찾지 못한 경우 아래 문장을 출력하라.
    cout << "not found(key)  : (" << key << ")" << endl;
}

void lambda_1() {
    vector< int > v;
    createVector(v);
    int value = rnd.getInt();
    cout << "added value: (" << value << ")" << endl;

    // TODO: 반드시 for_each() 문과 람다 함수를 이용하여 
    //       벡터 v의 각각의 원소에 위 지역변수 value를 더하라.
    // 주의: 람다 함수의 캡쳐리스트와 매개변수 타입에 주의하라. value or reference or pointer?
    //      for_each()와 람다 함수를 사용하지 않은 경우 0점 처리함

    displayVector(v);
}

void lambda_2() {
    vector< int > v;
    createVector(v);
    int sum = 0;

    // TODO: 반드시 for_each() 문과 람다 함수를 이용하여 
    //       벡터 v의 모든 원소 값들의 합 sum을 구한 후 평균 값(실수)을 출력하라.
    // 주의: 람다 함수의 캡쳐리스트와 매개변수 타입에 주의하라. value or reference or pointer?
    //      for_each()와 람다 함수를 사용하지 않은 경우 0점 처리함
    // 평균 값(실수) 출력 시 아래 문장을 사용하라. 
    
    cout << "average: " << 0.0 /* 평균값 */ << endl; // 0.0 대신 실제 평균 값(실수)을 출력하라.
}

/******************************************************************************
 * main() 함수
 ******************************************************************************/
int main()
{
    string menuStr =
    "--------------- STL and Lambda -------------\n"
    "  0.exit 1.createVector 2.sort 3.createMap  \n"
    "  4.findMap 5.lambda-1 6.lambda-2           \n"
    "--------------------------------------------\n"
    "menu item? ";

    rnd.setSeed(); // 난수 발생을 위한 seed 값 설정
    
    while (true) {
        int menu;
        cout << menuStr;
        cin >> menu;
        if (menu == 0) break;

        switch (menu) {
        case 1: createVector(); break;
        case 2: sortVector();     break;
        case 3: createMap(); break;
        case 4: findMap(); break;
        case 5: lambda_1(); break;
        case 6: lambda_2(); break;
        }
        cout << endl;
    }
    cout << "\nGood bye!!" << endl;
}


/******************************************************************************
 * [문제 0]
 ******************************************************************************/
// 위 코드를 컴파일한 후 실행하면 아래처럼 실행된다.
===============================================================================
== [문제 0] 실행 결과
=============================================================================== 
seed for random number? 1       // 사용자 입력
--------------- STL and Lambda -------------
  0.exit 1.createVector 2.sort 3.createMap  
  4.findMap 5.lambda-1 6.lambda-2           
--------------------------------------------
menu item? 0

Good bye!!


/******************************************************************************
 * [문제 1] 벡터 생성 및 출력
 ******************************************************************************/
// 메뉴항목 1을 선택할 경우 createVector() -> createVector(v) -> displayVector(v) 순으로
// 함수들이 호출된다.
// 아래 [문제 1] 실행 결과처럼 출력될 수 있도록 createVector(vector< int >& v)와
// displayVector(vector< int >& v) 함수를 완성하라.
===============================================================================
== [문제 1] 실행 결과
=============================================================================== 
seed for random number? 1       // 사용자 입력
--------------- STL and Lambda -------------
  0.exit 1.createVector 2.sort 3.createMap  
  4.findMap 5.lambda-1 6.lambda-2           
--------------------------------------------
menu item? 1                    // 사용자 입력
vector[size=10]: 0 1 7 4 5 2 0 6 6 9 


/******************************************************************************
 * [문제 2] 벡터의 정렬
 ******************************************************************************/
// 메뉴항목 2를 선택할 경우 sortVector()가 호출된다.
// 아래 [문제 2] 실행 결과처럼 출력될 수 있도록 sortVector()를 완성하라.
===============================================================================
== [문제 2] 실행 결과
=============================================================================== 
seed for random number? 1
...
menu item? 2 // 프로그램 시작 후 다른 메뉴 항목 선택하지 말고 바로 3번 메뉴항목을 선택해야 함
vector[size=10]: 0 1 7 4 5 2 0 6 6 9 
vector[size=10]: 0 1 4 5 7 0 2 6 6 9 

...
menu item? 2
vector[size=10]: 3 5 8 0 0 5 6 0 3 0 
vector[size=10]: 0 0 3 5 8 0 0 3 5 6 

...
menu item? 2
vector[size=10]: 4 6 5 9 8 5 0 6 4 7 
vector[size=10]: 4 5 6 8 9 0 4 5 6 7 


/******************************************************************************
 * [문제 3] 맵 생성 및 출력
 ******************************************************************************/
// 메뉴항목 3을 선택할 경우 createMap() -> createMap(m) 순으로 호출된다.
// 아래 [문제 3] 실행 결과처럼 출력될 수 있도록 createMap(map< int, int >& m) 함수를 완성하라.
===============================================================================
== [문제 3] 실행 결과
=============================================================================== 
seed for random number? 1
...
menu item? 3 // 프로그램 시작 후 다른 메뉴 항목 선택하지 말고 바로 3번 메뉴항목을 선택해야 함 
map[size=6]: (0,5) (3,0) (5,2) (6,0) (7,4) (8,0) 

...
menu item? 3
map[size=8]: (0,6) (2,0) (4,7) (5,9) (6,7) (7,3) (8,5) (9,3) 

/******************************************************************************
 * [문제 4] 맵의 검색
 ******************************************************************************/
// 메뉴항목 4를 선택할 경우 findMap()이 호출된다.
// 아래 [문제 4] 실행 결과처럼 출력될 수 있도록 findMap()를 완성하라.
===============================================================================
== [문제 4] 실행 결과
=============================================================================== 
seed for random number? 1
...
menu item? 4 // 프로그램 시작 후 다른 메뉴 항목 선택하지 말고 바로 4번 메뉴항목을 선택해야 함
map[size=6]: (0,5) (3,0) (5,2) (6,0) (7,4) (8,0) 
not found(key)  : (4)

...
menu item? 4
map[size=6]: (0,7) (3,2) (5,0) (6,4) (7,9) (9,8) 
found(key,value): (9,8)


/******************************************************************************
 * [문제 5] for_each 문과 람다 함수 사용법
 ******************************************************************************/
// 메뉴항목 5를 선택할 경우 lambda_1()이 호출된다.
// 아래 [문제 5] 실행 결과처럼 출력될 수 있도록 lambda_1() 함수를 완성하라.
===============================================================================
== [문제 5] 실행 결과
=============================================================================== 
seed for random number? 1
...
menu item? 5 // 프로그램 시작 후 다른 메뉴 항목 선택하지 말고 바로 5번 메뉴항목을 선택해야 함
vector[size=10]: 0 1 7 4 5 2 0 6 6 9 
added value: (3)
vector[size=10]: 3 4 10 7 8 5 3 9 9 12 

...
menu item? 5
vector[size=10]: 5 8 0 0 5 6 0 3 0 4 
added value: (6)
vector[size=10]: 11 14 6 6 11 12 6 9 6 10 


/******************************************************************************
 * [문제 6] for_each 문과 람다 함수 사용법
 ******************************************************************************/
// 메뉴항목 6을 선택할 경우 lambda_2()가 호출된다.
// 아래 [문제 6] 실행 결과처럼 출력될 수 있도록 lambda_2() 함수를 완성하라.
===============================================================================
== [문제 6] 실행 결과
=============================================================================== 
seed for random number? 1
...
menu item? 6
vector[size=10]: 0 1 7 4 5 2 0 6 6 9 
average: 4

...
menu item? 6
vector[size=10]: 3 5 8 0 0 5 6 0 3 0 
average: 3

...
menu item? 6
vector[size=10]: 4 6 5 9 8 5 0 6 4 7 
average: 5.4

(끝)